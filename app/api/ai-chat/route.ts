import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ API de chat iniciada");

    const body = await request.json();
    const { message, messageId, timestamp, sessionId } = body;

    console.log("üì® Dados recebidos:", {
      message,
      messageId,
      timestamp,
      sessionId,
    });

    // Valida√ß√£o dos dados recebidos
    if (!message || !messageId) {
      console.log("‚ùå Valida√ß√£o falhou: mensagem ou ID ausente");
      return NextResponse.json(
        { error: "Mensagem e ID s√£o obrigat√≥rios" },
        { status: 400 }
      );
    }

    // URL do webhook do n8n
    const n8nWebhookUrl = process.env.N8N_WEBHOOK_URL;

    console.log("üîó Webhook URL configurada:", n8nWebhookUrl ? "Sim" : "N√£o");

    // Se n√£o houver webhook configurado, retorna resposta de fallback
    if (!n8nWebhookUrl) {
      console.log("‚ö†Ô∏è Webhook n√£o configurado, retornando fallback");
      return NextResponse.json({
        response:
          "Ol√°! Sou a IA da Ag√™ncia Up Front. Como posso ajudar voc√™ hoje? Estou aqui para responder suas perguntas sobre nossos servi√ßos de desenvolvimento web, design e marketing digital.",
        success: true,
        webhookStatus: "not_configured",
        timestamp: new Date().toISOString(),
      });
    }

    // Dados para enviar ao n8n
    const webhookData = {
      message,
      messageId,
      timestamp,
      sessionId,
      source: "agenciaupfront.com.br",
      userAgent: request.headers.get("user-agent"),
      ip:
        request.headers.get("x-forwarded-for") ||
        request.headers.get("x-real-ip") ||
        "unknown",
      referer: request.headers.get("referer"),
      domain: "www.agenciaupfront.com.br",
    };

    console.log("üì§ Enviando dados para webhook:", webhookData);

    // Envia dados para o webhook do n8n
    const webhookResponse = await fetch(n8nWebhookUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(webhookData),
    });

    console.log(
      "üì• Resposta do webhook:",
      webhookResponse.status,
      webhookResponse.statusText
    );

    if (!webhookResponse.ok) {
      console.error(
        "‚ùå Erro no webhook do n8n:",
        webhookResponse.status,
        webhookResponse.statusText
      );

      // Retorna resposta de fallback em caso de erro no webhook
      return NextResponse.json({
        response:
          "Ol√°! Sou a IA da Ag√™ncia Up Front. Estou enfrentando algumas dificuldades t√©cnicas no momento, mas posso ajudar com informa√ß√µes b√°sicas sobre nossos servi√ßos. Para atendimento personalizado, entre em contato via WhatsApp ou email.",
        success: true,
        webhookStatus: "error",
        error: `Webhook retornou status ${webhookResponse.status}`,
        timestamp: new Date().toISOString(),
      });
    }

    const webhookResult = await webhookResponse.json();
    console.log("‚úÖ Webhook processado com sucesso:", webhookResult);

    // Retorna exatamente o que o webhook do n8n retornou
    return NextResponse.json(webhookResult);
  } catch (error) {
    console.error("üí• Erro na API de chat:", error);

    return NextResponse.json(
      {
        error: "Erro interno do servidor",
        response:
          "Ol√°! Sou a IA da Ag√™ncia Up Front. Estou enfrentando dificuldades t√©cnicas no momento. Por favor, entre em contato diretamente via WhatsApp ou email para atendimento personalizado.",
        success: false,
        timestamp: new Date().toISOString(),
      },
      { status: 500 }
    );
  }
}
